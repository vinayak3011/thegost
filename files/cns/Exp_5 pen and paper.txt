 		Experiment 5 (Paper-Based): Design and Implement a Product Cipher Using Substitution Ciphers


Example 1 using Caesar cipher and vignere cipher
 


🔒 Objective:
To manually design and apply a product cipher using multiple substitution techniques. A product cipher increases complexity and security by combining different encryption steps.

✍️ Manual Procedure Overview
We will use two substitution steps:

Caesar Cipher – shift each letter by a fixed number.

Vigenère Cipher – shift letters based on a key word.

🔤 Step-by-Step Example
📌 Given:
Plaintext: HELLO

Caesar Shift: +3

Vigenère Key: KEY

🔁 Step 1: Apply Caesar Cipher
Rule: Shift each letter forward by 3 in the alphabet.

Plaintext	H	E	L	L	O
Shift +3	K	H	O	O	R

Caesar Output: KHOOR

🔁 Step 2: Apply Vigenère Cipher
Vigenère Key: KEY (Repeat to match length of message → KEYKE)

Step: For each letter, shift it by the alphabetical position of the key letter:

K = 10, E = 4, Y = 24

| Caesar Output | K | H | O | O | R |
| Vigenère Key | K | E | Y | K | E |
| Shift Value |10 | 4 |24 |10 | 4 |

Now encrypt each:

K + 10 = U

H + 4 = L

O + 24 = M

O + 10 = Y

R + 4 = V

Final Encrypted Output: ULMYV

✅ Final Result:
Plaintext: HELLO

Caesar Encrypted: KHOOR

Vigenère Encrypted (Product Cipher Output): ULMYV



Example 2 using playfair cipher and vignere cipher



 Objective:
To encrypt a plaintext using two substitution techniques in sequence:

Playfair Cipher

Vigenère Cipher

This layered encryption increases complexity and makes classical attacks (like frequency analysis) significantly harder.

🧾 Example Details
Plaintext: HELLO

Playfair Key: MONARCHY

Vigenère Key: KEY

🔁 Step 1: Encrypt using Playfair Cipher
📌 Playfair Cipher Rules Recap:
Create a 5x5 matrix from a keyword (no duplicate letters, I/J treated as the same).

Split plaintext into digraphs (pairs of 2 letters). If both letters in a pair are the same, insert 'X' between them.

Encryption rules:

Same row → replace each letter with the one to its right

Same column → replace with the one below

Rectangle → swap letters across the rectangle

🔤 Step 1.1: Construct Playfair Matrix
Key: MONARCHY

Matrix (I/J are combined):

mathematica
Copy
Edit
M O N A R
C H Y B D
E F G I/J K
L P Q S T
U V W X Z
🔤 Step 1.2: Prepare Digraphs from "HELLO"
Pairing: HE, LX, LO → (we break LL into L and X)

🔤 Step 1.3: Encrypt Digraphs
a) HE
H → row 2, col 2

E → row 3, col 1 → Rectangle rule

→ Swap columns:

H → col 1 → C

E → col 2 → F

→ Encrypted = CF

b) LX
L → row 4, col 1

X → row 5, col 4 → Rectangle rule

→ L → col 4 → S
→ X → col 1 → U

→ Encrypted = SU

c) LO
L → row 4, col 1

O → row 1, col 2 → Rectangle rule

→ L → col 2 → P
→ O → col 1 → M

→ Encrypted = PM

✅ Playfair Output: CFSUPM
🔁 Step 2: Apply Vigenère Cipher
🔤 Inputs:
Text: CFSUPM

Key: KEY → repeated to match 6 letters → KEYKEY

Alphabetic positions: K=10, E=4, Y=24

Text	C	F	S	U	P	M
Key	K	E	Y	K	E	Y
Shift	10	4	24	10	4	24

Now encrypt each:

C + 10 = M

F + 4 = J

S + 24 = Q

U + 10 = E

P + 4 = T

M + 24 = K

✅ Final Ciphertext: MJQETK
📌 Final Summary:
Step	Result
Plaintext	HELLO
Playfair	CFSUPM
Vigenère	MJQETK
Final Cipher	MJQETK



--------------------------------------------------------------------------------------------------------------------------------

🧪 Experiment 5A: Product Cipher using Caesar Cipher and Vigenère Cipher


🔸Problem Statement:
Design and implement a product cipher using Caesar cipher followed by Vigenère cipher, both of which are substitution techniques.

🔸Lab Outcomes:

Understood the working of mono-alphabetic and polyalphabetic substitution ciphers.

Applied multiple substitution techniques to strengthen encryption.

Analyzed the impact of layered encryption on resistance to cryptanalysis.

Practiced manual encryption techniques used in classical cryptography.

🔸Software Requirements:

No software required (pen-and-paper based).

[Optional for coding version]: Python 3.x, Text Editor or IDE like VS Code

🔸Conclusion:
In this experiment, we designed and implemented a product cipher by combining Caesar and Vigenère ciphers. This layered approach enhanced the security of the plaintext against brute-force and frequency analysis attacks. We also gained practical experience in manual encryption, strengthening conceptual clarity in classical cryptography.


🧪 Experiment 5B: Product Cipher using Playfair Cipher and Vigenère Cipher


🔸Problem Statement:
Design and implement a product cipher using Playfair cipher followed by Vigenère cipher, both of which are classical substitution ciphers.

🔸Lab Outcomes:

Learned how to construct and use a 5x5 Playfair matrix from a keyword.

Performed digraph-based encryption using Playfair cipher.

Applied Vigenère cipher to further obfuscate the Playfair output.

Understood the security benefits of combining substitution techniques.

🔸Software Requirements:

No software required (pen-and-paper based).

[Optional for extended simulation]: Python 3.x, IDE or terminal

🔸Conclusion:
In this experiment, we designed and implemented a product cipher using Playfair cipher followed by Vigenère cipher. The double-layered encryption provided stronger protection against classical attacks such as frequency and digraph analysis. The experiment reinforced our understanding of classical encryption models and their limitations.


--------------------------------------------------------------------------------------------------------------------------------


✅ VIVA NOTES: Product Cipher – Caesar + Vigenère Cipher
🔐 1. What is a product cipher?
A product cipher combines two or more simple ciphers (typically substitution and/or transposition) to increase security. It is based on the principle that combining multiple weak ciphers can create a strong cipher.

🔑 2. Why combine Caesar and Vigenère?
Caesar Cipher is mono-alphabetic and easily broken by brute force.

Vigenère Cipher is polyalphabetic and more secure but still vulnerable to frequency analysis if the key is short.

Together, they form a layered encryption, making cryptanalysis more complex.

🧠 3. Caesar Cipher Key Space and Vulnerability
Only 25 possible keys (shift from 1 to 25).

Very easy to brute-force.

Frequency of letters remains unchanged → vulnerable to frequency analysis.

🧠 4. Vigenère Cipher Key Importance
Key length and randomness affect its strength.

Repeating keys reduce strength.

Long, non-repeating keys approximate a one-time pad, which is theoretically unbreakable.

🔒 5. Security Improvement
Product of Caesar + Vigenère adds confusion and diffusion.

Brute-forcing needs both Caesar shift and Vigenère key → harder than either alone.

✅ VIVA NOTES: Product Cipher – Playfair + Vigenère Cipher
🔐 1. What is the Playfair cipher?
A digraph substitution cipher that encrypts pairs of letters instead of single letters.

Uses a 5x5 matrix built from a keyword.

Treats I and J as the same letter.

🔑 2. How does Playfair work?
Plaintext is divided into digraphs (pairs of 2).

If a digraph contains the same letter (e.g., LL), insert X between them.

Encryption rules depend on letter position:

Same row → take next letter to the right.

Same column → take next letter below.

Rectangle → swap letters across the rectangle.

🧠 3. Weaknesses of Playfair Alone
More secure than mono-alphabetic ciphers, but:

Still vulnerable to frequency analysis on digraphs.

Limited keyspace.

🔐 4. Why combine Playfair with Vigenère?
Playfair breaks plaintext patterns by using digraphs.

Vigenère adds polyalphabetic substitution on top.

Together, they improve security significantly.

🔒 5. Vigenère after Playfair: Benefit
Vigenère randomizes the already-obscured ciphertext from Playfair.

Results in a ciphertext that is resistant to both letter and digraph frequency analysis.

🧠 6. Security Comparison
Cipher	Key Type	Vulnerability
Caesar	Numeric	Brute-force
Vigenère	Keyword	Kasiski, frequency (if short key)
Playfair	Keyword matrix	Digraph frequency
Product (2x)	Both	Much harder to break


✅ Common Viva Questions & Answers


Q: What is the difference between mono-alphabetic and polyalphabetic substitution?
A: Mono-alphabetic uses a single fixed mapping for each letter; polyalphabetic changes mappings using a key.

Q: What is the use of product ciphers in real-world cryptography?
A: Modern ciphers like AES are effectively product ciphers internally, using multiple rounds of substitution and permutation.

Q: Why use substitution before transposition (or vice versa)?
A: Either order can be used, but typically substitution is done first to obscure letter identity, then transposition to mix positions.

Q: Can Playfair cipher be used alone for secure communication?
A: No, it's more secure than Caesar but still vulnerable to digraph frequency analysis and known plaintext attacks.
